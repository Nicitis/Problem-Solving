// 백준 15990: 1, 2, 3 더하기 5(C++)
// 자신보다 작은 수를 만드는 경우의 수를 통해 구한다.
// 그러나 마지막에 더한 수에 따라 경우의 수를 구분해야 하는데,
// 그를 위해 마지막에 더한 수에 따라 배열을 따로 만든다.
// 최종적으로는 마지막에 1을 더했을 때, 2를 더했을 때, 3을 더했을 때
// 나타나는 경우의 수를 총합산한다.
#include <iostream>

#define MOD 1000000009

int main()
{
    // 마지막 수(1, 2, 3)에 따라 dp 배열을 만든다.
    int T, N;
    int dp[100001][3] = 
      { {0, 0, 0}, 
        {1, 0, 0}, 
        {0, 1, 0}, 
        {1, 1, 1} };
    
    // 입력
    std::ios_base::sync_with_stdio(false);
    std::cin >> T;

    for (int i = 4; i <= 100001; i++)
    {
        // 마지막이 2(1), 3(2)인 수에 1을 더함
        dp[i][0] = (dp[i-1][1] + dp[i-1][2]) % MOD;
        // 마지막이 1(0), 3(2)인 수에 2를 더함
        dp[i][1] = (dp[i-2][0] + dp[i-2][2]) % MOD;
        // 마지막이 1(0), 2(1)인 수에 3을 더함
        dp[i][2] = (dp[i-3][0] + dp[i-3][1]) % MOD;
    }

    for (int i = 0; i < T; i++)
    {
        std::cin >> N;
        // overflow가 일어나지 않도록 주의
        int result = (dp[N][0] + dp[N][1]) % MOD;
        result = (result + dp[N][2]) % MOD;
        std::cout << result << '\n';
    }
}